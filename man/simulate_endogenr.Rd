% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/systemsim.R
\name{simulate_endogenr}
\alias{simulate_endogenr}
\title{Dynamic simulation of the system}
\usage{
simulate_endogenr(nsim, simulator_setup, parallel = FALSE, ncores = 6)
}
\arguments{
\item{nsim}{Integer. The number of outer-loop simulations. The outer-loop includes new estimation of models, possibly based on
a subset of training data, or other stochastic elements in the estimation stage. See \code{\link[=setup_simulator]{setup_simulator()}} for details on inner simulations.
The total number of simulations would be nsim * inner_sims (defined in \code{\link[=setup_simulator]{setup_simulator()}}). It is recommended to use a number that has ncores
as a common divisor to effectively utilize all cores.}

\item{simulator_setup}{A list of simulator parameters generated by \code{\link[=setup_simulator]{setup_simulator()}}.}

\item{parallel}{Boolean. If false, will run sequential on one core. If true, will run using \code{\link[future:multisession]{future::multisession()}}.}

\item{ncores}{The number of cores to utilize if running in parallel. Use \code{\link[parallelly:availableCores]{parallelly::availableCores()}} to find out how many you have available.}
}
\value{
a data.frame with simulation results, as well as the training data. .sim denotes each simulation.
}
\description{
This is the main function used to run the endogenr simulation system. It will estimate all models,
sequence the forecast simulation, and simulate outcomes for all units across the forecast horizon.
It supports parallel computation using \code{\link[future:multisession]{future::multisession()}} which (should) also work on Windows systems.
}
\examples{
df <- endogenr::example_data |> tsibble::as_tsibble(key = "gwcode", index = "year")
train <- df |> dplyr::filter(year>= 1970, year < 2010) # used for starting values in parametric distribution
c1 <- yjbest ~ lag(zoo::rollsumr(yjbest, k = 5, fill = NA)) + lag(log(gdppc))
model_system <- list(
  build_model("deterministic",formula = gdppc ~ I(abs(lag(gdppc)*(1+gdppc_grwt)))),
  build_model("deterministic", formula = gdp ~ I(abs(gdppc*population))),
  build_model("parametric_distribution", formula = ~gdppc_grwt, distribution = "t_ls", start = list(df = 1, mu = mean(train$gdppc_grwt), sigma = sd(train$gdppc_grwt))),
  build_model("linear", formula = c1, boot = "resid"),
  build_model("univariate_fable", formula = dem ~ error("A") + trend("N") + season("N"), method = "ets"),
  build_model("exogen", formula = ~psecprop),
  build_model("exogen", formula = ~population)
)

simulator_setup <- setup_simulator(models = model_system,
                                  data = df,
                                  train_start = 1970,
                                  test_start = 2010,
                                  horizon = 12,
                                  groupvar = "gwcode",
                                  timevar = "year",
                                  inner_sims = 2,
                                  min_window = 10)
set.seed(42)
res <- simulate_endogenr(nsim = 2, simulator_setup = simulator_setup, parallel = F)
}
